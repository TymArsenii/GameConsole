#define NOTE_B0 31
#define NOTE_C1 33
#define NOTE_CS1 35
#define NOTE_D1 37
#define NOTE_DS1 39
#define NOTE_E1 41
#define NOTE_F1 44
#define NOTE_FS1 46
#define NOTE_G1 49
#define NOTE_GS1 52
#define NOTE_A1 55
#define NOTE_AS1 58
#define NOTE_B1 62
#define NOTE_C2 65
#define NOTE_CS2 69
#define NOTE_D2 73
#define NOTE_DS2 78
#define NOTE_E2 82
#define NOTE_F2 87
#define NOTE_FS2 93
#define NOTE_G2 98
#define NOTE_GS2 104
#define NOTE_A2 110
#define NOTE_AS2 117
#define NOTE_B2 123
#define NOTE_C3 131
#define NOTE_CS3 139
#define NOTE_D3 147
#define NOTE_DS3 156
#define NOTE_E3 165
#define NOTE_F3 175
#define NOTE_FS3 185
#define NOTE_G3 196
#define NOTE_GS3 208
#define NOTE_A3 220
#define NOTE_AS3 233
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
#define NOTE_C6 1047
#define NOTE_CS6 1109
#define NOTE_D6 1175
#define NOTE_DS6 1245
#define NOTE_E6 1319
#define NOTE_F6 1397
#define NOTE_FS6 1480
#define NOTE_G6 1568
#define NOTE_GS6 1661
#define NOTE_A6 1760
#define NOTE_AS6 1865
#define NOTE_B6 1976
#define NOTE_C7 2093
#define NOTE_CS7 2217
#define NOTE_D7 2349
#define NOTE_DS7 2489
#define NOTE_E7 2637
#define NOTE_F7 2794
#define NOTE_FS7 2960
#define NOTE_G7 3136
#define NOTE_GS7 3322
#define NOTE_A7 3520
#define NOTE_AS7 3729
#define NOTE_B7 3951
#define NOTE_C8 4186
#define NOTE_CS8 4435
#define NOTE_D8 4699
#define NOTE_DS8 4978

const uint8_t logo[] PROGMEM = {0x00, 0x80, 0xF0, 0x18, 0x0C, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0x80, 0x40, 0x40, 0x40, 0xC0, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x80, 0xF0, 0x18, 0x0C, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0x80, 0x40, 0x40, 0x40, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x38, 0x60, 0x40, 0x80, 0x80, 0x80, 0x80, 0x82, 0x82, 0xFE, 0x7E, 0x02, 0x00, 0x00, 0x71, 0xF1, 0x88, 0x88, 0x84, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x1E, 0x7F, 0xE2, 0xC2, 0xC2, 0xC2, 0x43, 0x21, 0x00, 0x07, 0x1F, 0x38, 0x60, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0xC0, 0x60, 0x30, 0x00, 0x00, 0x1E, 0x7F, 0x60, 0xC0, 0x80, 0x80, 0x80, 0x41, 0x7F, 0x1E, 0x00, 0x80, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x63, 0xC7, 0x86, 0x8C, 0x9C, 0x78, 0x31, 0x00, 0x00, 0x1E, 0x7F, 0x60, 0xC0, 0x80, 0x80, 0x80, 0x41, 0x7F, 0x1E, 0x80, 0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x1E, 0x7F, 0xE2, 0xC2, 0xC2, 0xC2, 0x43, 0x21, 0x00};
// logo - 128x16

const uint8_t abc[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x09, 0x08, 0x08, 0x08, 0x09, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x24, 0x24, 0x24, 0x24, 0x24, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x24, 0x24, 0x24, 0x24, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x24, 0x24, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xF0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x80, 0x80, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x20, 0x40, 0x80, 0x40, 0x20, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x20, 0x40, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x04, 0x04, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x24, 0x24, 0x24, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x04, 0x04, 0x04, 0x44, 0x84, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x24, 0x24, 0x24, 0x64, 0xA4, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x24, 0x24, 0x24, 0x24, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x01, 0x01, 0x01, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 0x41, 0x41, 0x41, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x08, 0x04, 0x02, 0x04, 0x08, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x05, 0x02, 0x05, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x1E, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x14, 0x12, 0x12, 0x12, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x08, 0x10, 0x12, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00};
// abc - 128x64

const uint8_t A[] PROGMEM = {0xFC, 0x92, 0x91, 0x91, 0x91, 0x92, 0xFC};  // A - 7x7

const uint8_t B[] PROGMEM = {0xFF, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xB6};  // B - 7x7

const uint8_t C[] PROGMEM = {0xBE, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xA2};  // C - 7x7

const uint8_t D[] PROGMEM = {0xFF, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xBE};  // D - 7x7

const uint8_t E[] PROGMEM = {0xFF, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC1};  // E - 7x7

const uint8_t F[] PROGMEM = {0xFF, 0x89, 0x89, 0x89, 0x89, 0x89, 0x81};  // F - 7x7

const uint8_t G[] PROGMEM = {0xBE, 0xC1, 0xC1, 0xC1, 0xC9, 0xC9, 0xFA};  // G - 7x7

const uint8_t H[] PROGMEM = {0xFF, 0x88, 0x88, 0x88, 0x88, 0x88, 0xFF};  // H - 7x7

const uint8_t I[] PROGMEM = {0x80, 0x80, 0xC1, 0xFF, 0xC1, 0x80, 0x80};  // I - 7x7

const uint8_t J[] PROGMEM = {0xA0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xBF};  // J - 7x7

const uint8_t K[] PROGMEM = {0xFF, 0x88, 0x88, 0x94, 0xA2, 0xC1, 0x80};  // K - 7x7

const uint8_t L[] PROGMEM = {0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80};  // L - 7x7

const uint8_t M[] PROGMEM = {0xFF, 0x82, 0x84, 0x88, 0x84, 0x82, 0xFF};  // M - 7x7

const uint8_t N[] PROGMEM = {0xFF, 0x82, 0x84, 0x88, 0x90, 0xA0, 0xFF};  // N - 7x7

const uint8_t O[] PROGMEM = {0xBE, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xBE};  // O - 7x7

const uint8_t P[] PROGMEM = {0xFF, 0x89, 0x89, 0x89, 0x89, 0x89, 0x86};  // P - 7x7

const uint8_t Q[] PROGMEM = {0xBE, 0xC1, 0xC1, 0xC1, 0xD1, 0xA1, 0xDE};  // Q - 7x7

const uint8_t R[] PROGMEM = {0xFF, 0x89, 0x89, 0x89, 0x99, 0xA9, 0xC6};  // R - 7x7

const uint8_t S[] PROGMEM = {0xA6, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xB2};  // S - 7x7

const uint8_t T[] PROGMEM = {0x81, 0x81, 0x81, 0xFF, 0x81, 0x81, 0x81};  // T - 7x7

const uint8_t U[] PROGMEM = {0xBF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xBF};  // U - 7x7

const uint8_t V[] PROGMEM = {0x8F, 0x90, 0xA0, 0xC0, 0xA0, 0x90, 0x8F};  // V - 7x7

const uint8_t W[] PROGMEM = {0xFF, 0xA0, 0x90, 0x88, 0x90, 0xA0, 0xFF};  // W - 7x7

const uint8_t X[] PROGMEM = {0xC1, 0xA2, 0x94, 0x88, 0x94, 0xA2, 0xC1};  // X - 7x7

const uint8_t Y[] PROGMEM = {0x83, 0x84, 0x88, 0xF8, 0x88, 0x84, 0x83};  // Y - 7x7

const uint8_t Z[] PROGMEM = {0xE1, 0xD1, 0xC9, 0xC9, 0xC9, 0xC5, 0xC3};  // Z - 7x7

const uint8_t a[] PROGMEM = {0x20, 0x54, 0x54, 0x54, 0x54, 0x54, 0x78};

const uint8_t b[] PROGMEM = {0x7F, 0x48, 0x48, 0x48, 0x48, 0x48, 0x30};

const uint8_t c[] PROGMEM = {0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44};

const uint8_t d[] PROGMEM = {0x30, 0x48, 0x48, 0x48, 0x48, 0x48, 0x7F};

const uint8_t e[] PROGMEM = {0x38, 0x54, 0x54, 0x54, 0x54, 0x54, 0x58};

const uint8_t f[] PROGMEM = {0x08, 0x7E, 0x09, 0x09, 0x01, 0x02, 0x00};

const uint8_t g[] PROGMEM = {0x0C, 0x52, 0x52, 0x52, 0x52, 0x52, 0x3C};

const uint8_t h[] PROGMEM = {0x7F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x78};

const uint8_t i[] PROGMEM = {0x00, 0x00, 0x44, 0x7D, 0x40, 0x00, 0x00};

const uint8_t j[] PROGMEM = {0x20, 0x40, 0x40, 0x40, 0x40, 0x45, 0x3C};

const uint8_t k[] PROGMEM = {0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00};

const uint8_t l[] PROGMEM = {0x00, 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00};

const uint8_t m[] PROGMEM = {0x78, 0x08, 0x08, 0x70, 0x08, 0x08, 0x70};

const uint8_t n[] PROGMEM = {0x7C, 0x08, 0x04, 0x04, 0x04, 0x78, 0x00};

const uint8_t o[] PROGMEM = {0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38};

const uint8_t p[] PROGMEM = {0x7C, 0x14, 0x14, 0x14, 0x14, 0x08, 0x00};

const uint8_t q[] PROGMEM = {0x00, 0x08, 0x14, 0x14, 0x14, 0x14, 0x7C};

const uint8_t r[] PROGMEM = {0x7C, 0x08, 0x04, 0x04, 0x04, 0x08, 0x00};

const uint8_t s[] PROGMEM = {0x48, 0x54, 0x54, 0x54, 0x54, 0x54, 0x24};

const uint8_t t[] PROGMEM = {0x08, 0x3E, 0x48, 0x48, 0x40, 0x40, 0x20};

const uint8_t u[] PROGMEM = {0x3C, 0x40, 0x40, 0x40, 0x40, 0x20, 0x7C};

const uint8_t v[] PROGMEM = {0x1C, 0x20, 0x40, 0x40, 0x20, 0x1C, 0x00};

const uint8_t w[] PROGMEM = {0x1C, 0x20, 0x40, 0x40, 0x20, 0x1C, 0x00};

const uint8_t x[] PROGMEM = {0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00};

const uint8_t y[] PROGMEM = {0x00, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x3E};

const uint8_t z[] PROGMEM = {0x44, 0x64, 0x54, 0x54, 0x4C, 0x44, 0x00};

const uint8_t exclamation_mark[] PROGMEM = {0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00};

const uint8_t comma[] PROGMEM = {0x00, 0x00, 0x40, 0x30, 0x00, 0x00, 0x00};

const uint8_t space[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const uint8_t *const letters_all[] = {a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, exclamation_mark, comma, space};

const char abc_str[] = {"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!, "};

const uint8_t button_down[] PROGMEM = {0x00, 0x00, 0xF8, 0x04, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x04, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x02, 0x04, 0x0F, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x0F, 0x04, 0x02};
// button down 25x20

const uint8_t button_left[] PROGMEM = {0x04, 0x0E, 0x15, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x40, 0xE0, 0x50, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x10, 0x0F, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// button left 20x25

const uint8_t button_right[] PROGMEM = {0xE0, 0x10, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x15, 0x0E, 0x04, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x50, 0xE0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00};
// button right 20x25

const uint8_t button_up[] PROGMEM = {0x04, 0x02, 0xFF, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0xFF, 0x02, 0x04, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00};
// button up 25x20

#include <PinChangeInterrupt.h>

uint32_t refresh_timer;
bool exit_to_menu;
bool pause_break = false;
bool pause = false;
byte battery_charge;
uint32_t battery_timer;
byte menu_active = 1;  // 1 - start menu; 2 - games menu;
bool beep_is_active;

String model_number = "A0001T/U";  // 0001 0002 0003

int hi_snake_skore = 0;
int hi_dino_skore = 0;

String name;

#define FULLY_CHAGRGED_BATTERY 4150
#define FULLY_DISCHAGRGED_BATTERY 3000

#define OLED_SOFT_BUFFER_64

#include <EEPROM.h>
#include <EncButton.h>
#include <GyverOLED.h>
#include <GyverTimers.h>
#include <SPI.h>

GyverOLED<SSD1306_128x64, OLED_BUFFER, OLED_SPI, 10, 9, 8> oled;  // for ATmega2560
//GyverOLED<SSD1306_128x64, OLED_BUFFER, OLED_SPI, 7, 8, 9> oled;  // for Arduino
//GyverOLED<SSD1306_128x64, OLED_BUFFER, OLED_SPI, 16, 2, 15> oled; // for ESP32

Button up(2);
Button down(3);
Button ok(4);
Button left(5);
Button right(6);

#define REFRESH_RATE 60  //Hz
#define BOTTOM_HEIGHT 40
#define EEPROM_KEY 2

void setup()
{
  oled.init();
  oled.setPower(true);

  up.setStepTimeout(200);
  down.setStepTimeout(200);
  ok.setStepTimeout(100);
  left.setStepTimeout(100);
  right.setStepTimeout(100);

  up.setHoldTimeout(1000);
  down.setHoldTimeout(1000);
  ok.setHoldTimeout(1000);
  left.setHoldTimeout(1000);
  right.setHoldTimeout(1000);

  Serial.begin(500000);
  if (EEPROM[0] != EEPROM_KEY)
  {
    for (int id = 1; id < 550; id++)
    {
      EEPROM.put(id, 0);
    }
    EEPROM[0] = EEPROM_KEY;
    /*
    oled.home();
    oled.setScale(2);
    oled.print("First start");
    oled.update();
    delay(1000);
    */
  }
  byte name_size;
  EEPROM.get(5, hi_dino_skore);
  EEPROM.get(10, hi_snake_skore);
  EEPROM.get(20, battery_charge);
  EEPROM.get(500, beep_is_active);

  int len = EEPROM.read(30);
  name.reserve(len);

  for (int i = 0; i < len; i++)
  {
    name += (char)EEPROM.read(100 + 1 + i);
  }

  if (name != "")
  {
    oled.home();
    oled.setScale(1);
    oled.autoPrintln(true);
    oled.print("Hi, ");
    medium_print(name);
    oled.setScale(1);
    oled.setCursor(0, 2);
    oled.print("What will we play    now?");
    oled.update();
    delay(2000);
  }
  if (name == "")
  {
    oled.home();
    oled.setScale(1);
    oled.autoPrintln(true);
    oled.print("Hi! Welcome to Game  Console! Enter your  name in next window, please. After you    done - press and holdOK button until you  see 'Saved!'");
    oled.setCursor(89, 6);
    oled.textMode(BUF_ADD);
    oled.print("NEXT");
    oled.setCursor(120, 6);
    oled.print(">");
    oled.setCursorXY(120, 48);
    oled.print("-");
    oled.setCursorXY(115, 48);
    oled.print("-");
    oled.update();
    while (true)
    {
      buttons_tick();
      if (ok.click() || right.click())
      {
        break;
      }
    }
    oled.textMode(BUF_REPLACE);
    name_picker();
    oled.home();
    oled.clear();
    oled.print("Thank you, ");
    oled.print(name);
    oled.print("! Hope you  enjoy using  Game Console!");
    oled.update();
    delay(5000);
  }

  /*
  oled.drawBitmap(0, 15, logo, 128, 16);
  oled.setCursor(33, 5);
  oled.print("by Arsenii");
  oled.update();
  */

  attachPCINT(digitalPinToPCINT(2), up_tick, FALLING);
  attachPCINT(digitalPinToPCINT(3), down_tick, FALLING);
  attachPCINT(digitalPinToPCINT(4), ok_tick, FALLING);
  attachPCINT(digitalPinToPCINT(5), left_tick, FALLING);
  attachPCINT(digitalPinToPCINT(6), right_tick, FALLING);

  oled.setContrast(255);
}

void loop()
{
  global_loop();
  //snake();
  //google_dino();
  //pong();
  if (menu_active == 1)
  {
    start_menu();
  }
  else if (menu_active == 2)
  {
    games_menu();
  }
}

void global_loop() { ; }

void draw_battery(byte percent)
{
  if (millis() - battery_timer >= 5000)
  {
    oled.setScale(1);
    battery_timer = millis();
    battery_charge = constrain(map(get_VCC() * 10, FULLY_DISCHAGRGED_BATTERY, FULLY_CHAGRGED_BATTERY, 0, 100), 0, 100);
    if (get_VCC() == 0)
    {
      EEPROM.get(20, battery_charge);
    }
    else
    {
      int eeprom_check;
      EEPROM.get(20, eeprom_check);
      if (abs(eeprom_check - battery_charge) >= 5)
      {
        EEPROM.put(20, battery_charge);
      }
    }
  }
  oled.clear(80, 0, 127, 8);
  if (battery_charge < 10)
  {
    oled.setCursorXY(95, 0);
  }
  else if (battery_charge >= 10 && battery_charge < 100)
  {
    oled.setCursorXY(90, 0);
  }
  else if (battery_charge == 100)
  {
    oled.setCursorXY(85, 0);
  }
  oled.print(battery_charge);
  oled.print("%");
  oled.setCursorXY(110, 0);
  oled.drawByte(0b11111111);
  for (byte i = 0; i < 100 / 8; i++)
  {
    if (i < (battery_charge) / 8)
      oled.drawByte(0b11111111);
    else
      oled.drawByte(0b10000001);
  }
  oled.drawByte(0b11111111);
  oled.drawByte(0b00111100);
  oled.drawByte(0b00111100);
}

void buttons_tick()
{
  up.tick();
  down.tick();
  left.tick();
  right.tick();
  ok.tick();
}

void up_tick(void) { up.pressISR(); }
void down_tick(void) { down.pressISR(); }
void ok_tick(void) { ok.pressISR(); }
void right_tick(void) { right.pressISR(); }
void left_tick(void) { left.pressISR(); }

void medium_print(String what_to_print)
{
  for (int id = 0; id <= what_to_print.length(); id++)
  {
    for (int letter_id = 0; letter_id < 50; letter_id++)
    {
      if (what_to_print[id] == abc_str[letter_id])
      {
        oled.drawBitmap(10 * id + 25, 0, letters_all[letter_id], 7, 7);
        oled.fastLineH(7, 10 * id + 25, 10 * id + 25 + 7, OLED_CLEAR);
        //oled.print(abc_str[letter_id]);
      }
    }
  }
}

int get_VCC(void)  // Returns actual value of Vcc (x 100)
{
  // For mega boards
  const long InternalReferenceVoltage = 1115L;  // Adjust this value to your boards specific internal BG voltage x1000
      // REFS1 REFS0          --> 0 1, AVcc internal ref. -Selects AVcc reference
      // MUX4 MUX3 MUX2 MUX1 MUX0  --> 11110 1.1V (VBG)         -Selects channel 30, bandgap voltage, to measure
  ADMUX = (0 << REFS1) | (1 << REFS0) | (0 << ADLAR) | (0 << MUX5) | (1 << MUX4) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (0 << MUX0);

  // Start a conversion
  ADCSRA |= _BV(ADSC);
  // Wait for it to complete
  while (((ADCSRA & (1 << ADSC)) != 0))
  {
    ;
  }
  // Scale the value
  int results = (((InternalReferenceVoltage * 1024L) / ADC) + 5L) / 10L;  // calculates for straight line value
  return results;
}
